{
  "version": 3,
  "sources": [
    "../../lottery/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAqEK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA1BL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BK;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAVL;;;AAAA;AAUK;;;AAAA;;AAAL;;;AAYQ;AAAA;;AAAA;AACA;AAAuB;;AAAvB;AACA;AAAqB;AAArB;;AAER;;;AAMe;;AAAA;;AAAwB;;AAAxB;AAAP;AAGO;;AAAA;;AAAsB;AAAA;AAAA;AAAA;AAAtB;AAAP;AAEA;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;;AAQO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGO;AAAA;AAAA;AAAA;AAAP;AAGe;;AACF;;AAGkB;AAAA;AAAA;AAAA;AAA/B;;AAAA;AAAgB;AAGhB;AAAe;AACE;;AAIjB;AACW;;AAAA;;AAAA;AAA6C;;;;AAA7C;;;;;AADX;;;AAGQ;;;AAHR;;AAcO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGA;AACa;AAAA;AAAA;AAAA;AAEU;AAAA;AAAA;AAAA;;;AADZ;;;;;AAFX;;;AAIQ;;;AAJR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000"
    },
    "7": {
      "op": "bytecblock \"creator_address\" \"total_entries\" \"entry_fee\""
    },
    "49": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "51": {
      "op": "bz main_after_if_else@10",
      "stack_out": []
    },
    "54": {
      "op": "pushbytess 0xa03b81d2 0x87ea49d7 0xbe0bdebf 0x33b3499e // method \"create_application(uint64)void\", method \"enter_lottery(pay)void\", method \"pick_winner()void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(create_application(uint64)void)",
        "Method(delete_application()void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)"
      ],
      "stack_out": [
        "Method(create_application(uint64)void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)",
        "Method(delete_application()void)"
      ]
    },
    "76": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_application(uint64)void)",
        "Method(delete_application()void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(uint64)void)",
        "Method(enter_lottery(pay)void)",
        "Method(pick_winner()void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "79": {
      "op": "match main_create_application_route@3 main_enter_lottery_route@4 main_pick_winner_route@5 main_delete_application_route@6",
      "stack_out": []
    },
    "89": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "90": {
      "op": "return",
      "stack_out": []
    },
    "91": {
      "block": "main_delete_application_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "93": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "DeleteApplication"
      ]
    },
    "95": {
      "op": "==",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "96": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "97": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "99": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "100": {
      "callsub": "smart_contracts.lottery.contract.Lottery.delete_application",
      "op": "callsub delete_application"
    },
    "103": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": []
    },
    "105": {
      "block": "main_pick_winner_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "107": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "108": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "112": {
      "callsub": "smart_contracts.lottery.contract.Lottery.pick_winner",
      "op": "callsub pick_winner"
    },
    "115": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "return",
      "stack_out": []
    },
    "117": {
      "block": "main_enter_lottery_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "119": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "120": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "121": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "123": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "124": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "126": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "1"
      ]
    },
    "127": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "128": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "129": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "131": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "132": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "133": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "134": {
      "callsub": "smart_contracts.lottery.contract.Lottery.enter_lottery",
      "op": "callsub enter_lottery",
      "stack_out": []
    },
    "137": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "138": {
      "op": "return",
      "stack_out": []
    },
    "139": {
      "block": "main_create_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "141": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "142": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "143": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "145": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "146": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "147": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "150": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "151": {
      "callsub": "smart_contracts.lottery.contract.Lottery.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "154": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "155": {
      "op": "return",
      "stack_out": []
    },
    "156": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.create_application",
      "params": {
        "entry_fee#0": "uint64"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "159": {
      "op": "bytec_2 // \"entry_fee\"",
      "defined_out": [
        "\"entry_fee\""
      ],
      "stack_out": [
        "\"entry_fee\""
      ]
    },
    "160": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"entry_fee\"",
        "entry_fee#0 (copy)"
      ],
      "stack_out": [
        "\"entry_fee\"",
        "entry_fee#0 (copy)"
      ]
    },
    "162": {
      "op": "app_global_put",
      "stack_out": []
    },
    "163": {
      "op": "bytec_0 // \"creator_address\"",
      "defined_out": [
        "\"creator_address\""
      ],
      "stack_out": [
        "\"creator_address\""
      ]
    },
    "164": {
      "op": "global CreatorAddress",
      "defined_out": [
        "\"creator_address\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"creator_address\"",
        "new_state_value%0#0"
      ]
    },
    "166": {
      "op": "app_global_put",
      "stack_out": []
    },
    "167": {
      "op": "bytec_1 // \"total_entries\"",
      "defined_out": [
        "\"total_entries\""
      ],
      "stack_out": [
        "\"total_entries\""
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_entries\"",
        "0"
      ],
      "stack_out": [
        "\"total_entries\"",
        "0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "retsub": true,
      "op": "retsub"
    },
    "171": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.enter_lottery",
      "params": {
        "payment_txn#0": "uint64"
      },
      "block": "enter_lottery",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "174": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_txn#0 (copy)"
      ],
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "176": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "178": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "180": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "181": {
      "op": "assert",
      "stack_out": []
    },
    "182": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "184": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "186": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "187": {
      "op": "bytec_2 // \"entry_fee\"",
      "defined_out": [
        "\"entry_fee\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"entry_fee\""
      ]
    },
    "188": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "189": {
      "error": "check self.entry_fee exists",
      "op": "assert // check self.entry_fee exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "190": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "191": {
      "op": "assert",
      "stack_out": []
    },
    "192": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "193": {
      "op": "bytec_1 // \"total_entries\"",
      "defined_out": [
        "\"total_entries\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_entries\""
      ]
    },
    "194": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "195": {
      "error": "check self.total_entries exists",
      "op": "assert // check self.total_entries exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "196": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "197": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "198": {
      "op": "bytec_1 // \"total_entries\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_entries\""
      ]
    },
    "199": {
      "op": "swap",
      "stack_out": [
        "\"total_entries\"",
        "new_state_value%0#0"
      ]
    },
    "200": {
      "op": "app_global_put",
      "stack_out": []
    },
    "201": {
      "retsub": true,
      "op": "retsub"
    },
    "202": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.pick_winner",
      "params": {},
      "block": "pick_winner",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "204": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "205": {
      "op": "bytec_0 // \"creator_address\"",
      "defined_out": [
        "\"creator_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator_address\""
      ]
    },
    "206": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "207": {
      "error": "check self.creator_address exists",
      "op": "assert // check self.creator_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "208": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "209": {
      "op": "assert",
      "stack_out": []
    },
    "210": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "211": {
      "op": "bytec_1 // \"total_entries\"",
      "defined_out": [
        "\"total_entries\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_entries\""
      ]
    },
    "212": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "213": {
      "error": "check self.total_entries exists",
      "op": "assert // check self.total_entries exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "214": {
      "op": "assert",
      "stack_out": []
    },
    "215": {
      "op": "global Round",
      "defined_out": [
        "round_number#0"
      ],
      "stack_out": [
        "round_number#0"
      ]
    },
    "217": {
      "op": "global GroupSize",
      "defined_out": [
        "group_size#0",
        "round_number#0"
      ],
      "stack_out": [
        "round_number#0",
        "group_size#0"
      ]
    },
    "219": {
      "op": "intc_0 // 0",
      "stack_out": [
        "round_number#0",
        "group_size#0",
        "0"
      ]
    },
    "220": {
      "op": "bytec_1 // \"total_entries\"",
      "stack_out": [
        "round_number#0",
        "group_size#0",
        "0",
        "\"total_entries\""
      ]
    },
    "221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "group_size#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "round_number#0"
      ],
      "stack_out": [
        "round_number#0",
        "group_size#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "222": {
      "error": "check self.total_entries exists",
      "op": "assert // check self.total_entries exists",
      "stack_out": [
        "round_number#0",
        "group_size#0",
        "maybe_value%2#0"
      ]
    },
    "223": {
      "op": "uncover 2",
      "stack_out": [
        "group_size#0",
        "maybe_value%2#0",
        "round_number#0"
      ]
    },
    "225": {
      "op": "swap",
      "stack_out": [
        "group_size#0",
        "round_number#0",
        "maybe_value%2#0"
      ]
    },
    "226": {
      "op": "%",
      "defined_out": [
        "group_size#0",
        "random_number#0"
      ],
      "stack_out": [
        "group_size#0",
        "random_number#0"
      ]
    },
    "227": {
      "op": "swap",
      "stack_out": [
        "random_number#0",
        "group_size#0"
      ]
    },
    "228": {
      "op": "%",
      "defined_out": [
        "winner_index#0"
      ],
      "stack_out": [
        "winner_index#0"
      ]
    },
    "229": {
      "op": "gtxns Sender",
      "defined_out": [
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0"
      ]
    },
    "231": {
      "op": "itxn_begin"
    },
    "232": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "tmp%3#0"
      ]
    },
    "234": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "236": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "winner_address#0",
        "value%0#0"
      ]
    },
    "237": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "value%0#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "value%0#0",
        "1000000"
      ]
    },
    "241": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "winner_address#0"
      ],
      "stack_out": [
        "winner_address#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "242": {
      "op": "itxn_field Amount"
    },
    "244": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "246": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "247": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "249": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "250": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "252": {
      "op": "itxn_submit"
    },
    "253": {
      "retsub": true,
      "op": "retsub"
    },
    "254": {
      "subroutine": "smart_contracts.lottery.contract.Lottery.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "257": {
      "op": "bytec_0 // \"creator_address\"",
      "defined_out": [
        "\"creator_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator_address\""
      ]
    },
    "258": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "259": {
      "error": "check self.creator_address exists",
      "op": "assert // check self.creator_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "260": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "261": {
      "op": "assert",
      "stack_out": []
    },
    "262": {
      "op": "itxn_begin"
    },
    "263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "264": {
      "op": "bytec_0 // \"creator_address\"",
      "stack_out": [
        "0",
        "\"creator_address\""
      ]
    },
    "265": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "266": {
      "error": "check self.creator_address exists",
      "op": "assert // check self.creator_address exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "267": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "268": {
      "op": "bytec_0 // \"creator_address\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"creator_address\""
      ]
    },
    "269": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "270": {
      "error": "check self.creator_address exists",
      "op": "assert // check self.creator_address exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "271": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "273": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "274": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "276": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "278": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "279": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "281": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "282": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "284": {
      "op": "itxn_submit"
    },
    "285": {
      "retsub": true,
      "op": "retsub"
    }
  }
}