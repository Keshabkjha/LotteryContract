#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    intcblock 0 1 1000
    bytecblock "creator_address" "total_entries" "entry_fee"
    // smart_contracts/lottery/contract.py:12-13
    // # We want the methods in our contract to follow the ARC4 standard
    // class Lottery(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0xa03b81d2 0x87ea49d7 0xbe0bdebf 0x33b3499e // method "create_application(uint64)void", method "enter_lottery(pay)void", method "pick_winner()void", method "delete_application()void"
    txna ApplicationArgs 0
    match main_create_application_route@3 main_enter_lottery_route@4 main_pick_winner_route@5 main_delete_application_route@6

main_after_if_else@10:
    // smart_contracts/lottery/contract.py:12-13
    // # We want the methods in our contract to follow the ARC4 standard
    // class Lottery(ARC4Contract):
    intc_0 // 0
    return

main_delete_application_route@6:
    // smart_contracts/lottery/contract.py:82-84
    // @arc4.abimethod(
    //     allow_actions=["DeleteApplication"]
    // )
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    return

main_pick_winner_route@5:
    // smart_contracts/lottery/contract.py:52
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub pick_winner
    intc_1 // 1
    return

main_enter_lottery_route@4:
    // smart_contracts/lottery/contract.py:39
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lottery/contract.py:12-13
    // # We want the methods in our contract to follow the ARC4 standard
    // class Lottery(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/lottery/contract.py:39
    // @arc4.abimethod
    callsub enter_lottery
    intc_1 // 1
    return

main_create_application_route@3:
    // smart_contracts/lottery/contract.py:23-26
    // @arc4.abimethod(
    //     allow_actions=["NoOp"],
    //     create="require",
    // )
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/lottery/contract.py:12-13
    // # We want the methods in our contract to follow the ARC4 standard
    // class Lottery(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/lottery/contract.py:23-26
    // @arc4.abimethod(
    //     allow_actions=["NoOp"],
    //     create="require",
    // )
    callsub create_application
    intc_1 // 1
    return


// smart_contracts.lottery.contract.Lottery.create_application(entry_fee: uint64) -> void:
create_application:
    // smart_contracts/lottery/contract.py:23-30
    // @arc4.abimethod(
    //     allow_actions=["NoOp"],
    //     create="require",
    // )
    // def create_application(
    //     self,
    //     entry_fee: UInt64,  # The entry fee required to participate in the lottery
    // ) -> None:
    proto 1 0
    // smart_contracts/lottery/contract.py:34-35
    // # Initialize the entry fee and creator address in the contract's state
    // self.entry_fee = entry_fee
    bytec_2 // "entry_fee"
    frame_dig -1
    app_global_put
    // smart_contracts/lottery/contract.py:36
    // self.creator_address = Global.creator_address
    bytec_0 // "creator_address"
    global CreatorAddress
    app_global_put
    // smart_contracts/lottery/contract.py:37
    // self.total_entries = UInt64(0)  # Initialize the total number of entries to 0
    bytec_1 // "total_entries"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.lottery.contract.Lottery.enter_lottery(payment_txn: uint64) -> void:
enter_lottery:
    // smart_contracts/lottery/contract.py:39-40
    // @arc4.abimethod
    // def enter_lottery(self, payment_txn: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/lottery/contract.py:44-45
    // # Ensure that the payment is sent to the application address
    // assert payment_txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/lottery/contract.py:47-48
    // # # Ensure that the payment amount(microalgo) is equal to the entry fee
    // assert payment_txn.amount == self.entry_fee
    frame_dig -1
    gtxns Amount
    intc_0 // 0
    bytec_2 // "entry_fee"
    app_global_get_ex
    assert // check self.entry_fee exists
    ==
    assert
    // smart_contracts/lottery/contract.py:50
    // self.total_entries += UInt64(1)
    intc_0 // 0
    bytec_1 // "total_entries"
    app_global_get_ex
    assert // check self.total_entries exists
    intc_1 // 1
    +
    bytec_1 // "total_entries"
    swap
    app_global_put
    retsub


// smart_contracts.lottery.contract.Lottery.pick_winner() -> void:
pick_winner:
    // smart_contracts/lottery/contract.py:57-58
    // # # Ensure that only the creator can call this function
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_0 // 0
    bytec_0 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    ==
    assert
    // smart_contracts/lottery/contract.py:60-61
    // # Ensure there is at least one participant
    // assert self.total_entries > UInt64(0)
    intc_0 // 0
    bytec_1 // "total_entries"
    app_global_get_ex
    assert // check self.total_entries exists
    assert
    // smart_contracts/lottery/contract.py:63-64
    // # Simple pseudo-random number generator using round and index
    // round_number = Global.round
    global Round
    // smart_contracts/lottery/contract.py:65
    // group_size = Global.group_size
    global GroupSize
    // smart_contracts/lottery/contract.py:67-68
    // # Calculate pseudo-random index based on round number and group size
    // random_number = round_number % self.total_entries
    intc_0 // 0
    bytec_1 // "total_entries"
    app_global_get_ex
    assert // check self.total_entries exists
    uncover 2
    swap
    %
    // smart_contracts/lottery/contract.py:70-71
    // # Get the winner's address from the transaction at the calculated index
    // winner_index = random_number % group_size
    swap
    %
    // smart_contracts/lottery/contract.py:72
    // winner_address = gtxn.Transaction(winner_index).sender
    gtxns Sender
    // smart_contracts/lottery/contract.py:74-80
    // # itxn.fee(UInt64(1000))
    // # Transfer all ALGOs collected to the winner
    // itxn.Payment(
    //     amount=Global.current_application_address.balance - UInt64(100_00_00), # 1 Algo = 1000000 microalgos
    //     receiver=winner_address,
    //     fee=UInt64(1000)
    // ).submit()
    itxn_begin
    // smart_contracts/lottery/contract.py:77
    // amount=Global.current_application_address.balance - UInt64(100_00_00), # 1 Algo = 1000000 microalgos
    global CurrentApplicationAddress
    acct_params_get AcctBalance
    assert // account funded
    pushint 1000000 // 1000000
    -
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/lottery/contract.py:74-76
    // # itxn.fee(UInt64(1000))
    // # Transfer all ALGOs collected to the winner
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/lottery/contract.py:79
    // fee=UInt64(1000)
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/lottery/contract.py:74-80
    // # itxn.fee(UInt64(1000))
    // # Transfer all ALGOs collected to the winner
    // itxn.Payment(
    //     amount=Global.current_application_address.balance - UInt64(100_00_00), # 1 Algo = 1000000 microalgos
    //     receiver=winner_address,
    //     fee=UInt64(1000)
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.lottery.contract.Lottery.delete_application() -> void:
delete_application:
    // smart_contracts/lottery/contract.py:89-90
    // # Only allow the creator to delete the application
    // assert Txn.sender == self.creator_address
    txn Sender
    intc_0 // 0
    bytec_0 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    ==
    assert
    // smart_contracts/lottery/contract.py:92-98
    // # Send the remaining balance to the creator
    // itxn.Payment(
    //     receiver=self.creator_address,
    //     amount=0,
    //     close_remainder_to=self.creator_address,
    //     fee=UInt64(1000)
    // ).submit()
    itxn_begin
    // smart_contracts/lottery/contract.py:94
    // receiver=self.creator_address,
    intc_0 // 0
    bytec_0 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    // smart_contracts/lottery/contract.py:96
    // close_remainder_to=self.creator_address,
    intc_0 // 0
    bytec_0 // "creator_address"
    app_global_get_ex
    assert // check self.creator_address exists
    itxn_field CloseRemainderTo
    // smart_contracts/lottery/contract.py:95
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/lottery/contract.py:92-93
    // # Send the remaining balance to the creator
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/lottery/contract.py:97
    // fee=UInt64(1000)
    intc_2 // 1000
    itxn_field Fee
    // smart_contracts/lottery/contract.py:92-98
    // # Send the remaining balance to the creator
    // itxn.Payment(
    //     receiver=self.creator_address,
    //     amount=0,
    //     close_remainder_to=self.creator_address,
    //     fee=UInt64(1000)
    // ).submit()
    itxn_submit
    retsub
